//question 1

function findPairsWithSum(arr, targetSum) {
  const pairs = [];
  const seen = new Set();

  for (let i = 0; i < arr.length; i++) {
    const complement = targetSum - arr[i];

    if (seen.has(complement)) {
      // If the complement is in the 'seen' set, it means we've found a pair.
      pairs.push([arr[i], complement]);
    }

    // Add the current element to the 'seen' set.
    seen.add(arr[i]);
  }

  return pairs;
}

// Example usage:
const myArray = [3, 4, 5, 6, 7, 8];
const target = 11;
const pairs = findPairsWithSum(myArray, target);
console.log(pairs); // Output: [ [ 4, 7 ], [ 5, 6 ] ]



//question 2

function reverseArrayInPlace(arr) {
  const length = arr.length;
  const halfLength = Math.floor(length / 2);

  for (let i = 0; i < halfLength; i++) {
    // Swap elements from the beginning and end of the array
    const temp = arr[i];
    arr[i] = arr[length - 1 - i];
    arr[length - 1 - i] = temp;
  }
}

// Example usage:
const myArray2 = [1, 2, 3, 4, 5];
reverseArrayInPlace(myArray2);
console.log(myArray2); // Output: [5, 4, 3, 2, 1]


//Question 3

function areRotations(str1, str2) {
  if (str1.length !== str2.length) {
    return false;
  }

  // Concatenate str1 to itself
  const concatenatedStr = str1 + str1;

  // Check if str2 is a substring of the concatenated string
  return concatenatedStr.includes(str2);
}

// Example usage:
const string1 = "waterbottle";
const string2 = "erbottlewat";
const result = areRotations(string1, string2);
console.log(result); // Output: true (string2 is a rotation of string1)


//Question 4
//Write a program to print the first non-repeated character from a string

function firstNonRepeatedCharacter(str) {
  const charFrequency = {};

  // Count the frequency of each character
  for (const char of str) {
    if (charFrequency[char]) {
      charFrequency[char]++;
    } else {
      charFrequency[char] = 1;
    }
  }

  // Find the first character with a frequency of 1
  for (const char of str) {
    if (charFrequency[char] === 1) {
      return char;
    }
  }

  // If no non-repeated character is found, return null or an appropriate message
  return null;
}

// Example usage:
const myString = "programming";
const result1 = firstNonRepeatedCharacter(myString);
console.log(result1); // Output: "p"


//Question 5
//Read about the Tower of Hanoi algorithm. Write a program to implement it.

function towerOfHanoi(n, sourceRod, auxiliaryRod, targetRod) {
  if (n === 1) {
    // Base case: Move the top disk from sourceRod to targetRod
    console.log(`Move disk 1 from ${sourceRod} to ${targetRod}`);
    return;
  }

  // Move n-1 disks from sourceRod to auxiliaryRod using targetRod as auxiliary
  towerOfHanoi(n - 1, sourceRod, targetRod, auxiliaryRod);

  // Move the nth disk from sourceRod to targetRod
  console.log(`Move disk ${n} from ${sourceRod} to ${targetRod}`);

  // Move the n-1 disks from auxiliaryRod to targetRod using sourceRod as auxiliary
  towerOfHanoi(n - 1, auxiliaryRod, sourceRod, targetRod);
}

// Example usage:
const numDisks = 3;
towerOfHanoi(numDisks, 'A', 'B', 'C');



//Question 6
//Read about infix, prefix, and postfix expressions. Write a program to convert postfix to prefix expression.

function isOperator(character) {
  return /[+\-*/^]/.test(character);
}

function postfixToPrefix(postfix) {
  const stack = [];
  const operators = '+-*/^';

  for (let char of postfix) {
    if (!isOperator(char)) {
      stack.push(char);
    } else {
      const operand2 = stack.pop();
      const operand1 = stack.pop();
      const prefixExpression = char + operand1 + operand2;
      stack.push(prefixExpression);
    }
  }

  return stack[0]; // The final result will be the only item left in the stack
}

// Example usage:
const postfixExpression = "34+5*";
const prefixExpression = postfixToPrefix(postfixExpression);
console.log(prefixExpression); // Output: "+3*45"


//Question 7
 //Write a program to convert prefix expression to infix expression.

function isOperator(character) {
  return /[+\-*/^]/.test(character);
}

function prefixToInfix(prefix) {
  const stack = [];
  const operators = '+-*/^';

  for (let i = prefix.length - 1; i >= 0; i--) {
    const char = prefix[i];

    if (!isOperator(char)) {
      stack.push(char);
    } else {
      const operand1 = stack.pop();
      const operand2 = stack.pop();
      const infixExpression = `(${operand1}${char}${operand2})`;
      stack.push(infixExpression);
    }
  }

  return stack[0]; // The final result will be the only item left in the stack
}

// Example usage:
const prefixExpression1 = "+3*45";
const infixExpression = prefixToInfix(prefixExpression1);
console.log(infixExpression); // Output: "(3+((4*5)))"


//Question 8
//Write a program to check if all the brackets are closed in a given code snippet.

function areBracketsBalanced(code) {
  const stack = [];
  const bracketPairs = {
    '(': ')',
    '{': '}',
    '[': ']',
  };

  for (let i = 0; i < code.length; i++) {
    const char = code.charAt(i);

    if (bracketPairs[char]) {
      // If the character is an opening bracket, push it onto the stack
      stack.push(char);
    } else if (char === ')' || char === '}' || char === ']') {
      // If the character is a closing bracket
      if (stack.length === 0) {
        // If the stack is empty, there's no matching opening bracket
        return false;
      }
      
      const lastOpenBracket = stack.pop();
      if (bracketPairs[lastOpenBracket] !== char) {
        // If the current closing bracket does not match the last open bracket
        return false;
      }
    }
  }

  // If the stack is empty, all brackets are properly closed
  return stack.length === 0;
}

// Example usage:
const codeSnippet1 = "{[()]}";
console.log(areBracketsBalanced(codeSnippet1)); // Output: true

const codeSnippet2 = "{[(])}";
console.log(areBracketsBalanced(codeSnippet2)); // Output: false


//Question 9
//Write a program to reverse a stack.

// class Stack {
//   constructor() {
//     this.items = [];
//   }

//   push(item) {
//     this.items.push(item);
//   }

//   pop() {
//     if (!this.isEmpty()) {
//       return this.items.pop();
//     }
//     return null;
//   }

//   peek() {
//     if (!this.isEmpty()) {
//       return this.items[this.items.length - 1];
//     }
//     return null;
//   }

//   isEmpty() {
//     return this.items.length === 0;
//   }

//   size() {
//     return this.items.length;
//   }
// }

// function reverseStack(stack) {
//   const tempStack = new Stack();

//   // Pop elements from the original stack and push them onto the temporary stack
//   while (!stack.isEmpty()) {
//     const item = stack.pop();
//     tempStack.push(item);
//   }

//   // Pop elements from the temporary stack and push them back onto the original stack
//   while (!tempStack.isEmpty()) {
//     const item = tempStack.pop();
//     stack.push(item);
//   }
// }

// // Example usage:
// const myStack = new Stack();
// myStack.push(1);
// myStack.push(2);
// myStack.push(3);
// myStack.push(4);

// console.log("Original Stack:");
// console.log(myStack.items);

// reverseStack(myStack);

// console.log("Reversed Stack:");
// console.log(myStack.items);


// // //Question 10
// // //Write a program to find the smallest number using a stack.

// class Stack {
// constructor() {
//     this.items = [];
//   }

//   push(item) {
//     this.items.push(item);
//   }

//   pop() {
//     if (this.isEmpty()) {
//       return null;
//     }
//     return this.items.pop();
//   }

//   peek() {
//     if (this.isEmpty()) {
//       return null;
//     }
//     return this.items[this.items.length - 1];
//   }

//   isEmpty() {
//     return this.items.length === 0;
//   }

//   size() {
//     return this.items.length;
//   }
// }

// class MinStack {
//   constructor() {
//     this.stack = new Stack();
//     this.minStack = new Stack();
//   }

//   push(item) {
//     this.stack.push(item);

//     if (this.minStack.isEmpty() || item <= this.minStack.peek()) {
//       // If the minStack is empty or the current item is smaller or equal,
//       // push it onto the minStack as well
//       this.minStack.push(item);
//     }
//   }

//   pop() {
//     if (this.stack.isEmpty()) {
//       return null;
//     }

//     const poppedItem = this.stack.pop();

//     if (poppedItem === this.minStack.peek()) {
//       // If the popped item is the current minimum, pop it from the minStack as well
//       this.minStack.pop();
//     }

//     return poppedItem;
//   }

//   getMin() {
//     if (this.minStack.isEmpty()) {
//       return null;
//     }
//     return this.minStack.peek();
//   }
// }

// // Example usage:
// const minStack = new MinStack();

// minStack.push(3);
// minStack.push(5);
// minStack.push(2);
// minStack.push(7);

// console.log("Minimum value in the stack:", minStack.getMin()); // Output: 2




